% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/em-group.R
\name{fit.copula.group}
\alias{fit.copula.group}
\title{EM Algorithm for Bernstein Copula with Binned Data}
\usage{
fit.copula.group(
  ubreaks,
  vbreaks,
  counts,
  R_init,
  prior = NULL,
  options = list()
)
}
\arguments{
\item{ubreaks}{Numeric vector. Breakpoints for the first variable.}

\item{vbreaks}{Numeric vector. Breakpoints for the second variable.}

\item{counts}{Numeric matrix. Counts of observations in each bin.}

\item{R_init}{Numeric matrix (m × n). Initial Bernstein copula weight matrix.}

\item{prior}{Numeric matrix (m × n). Dirichlet prior for Bernstein copula weight matrix.}

\item{options}{List. Control parameters. See Details.}
}
\value{
A list with elements:
\describe{
  \item{R}{Estimated weight matrix.}
  \item{llf}{Final log-likelihood.}
  \item{converged}{Logical. TRUE if convergence criteria met.}
  \item{iter}{Number of iterations.}
  \item{abserror}{Final absolute error.}
  \item{relerror}{Final relative error.}
}
}
\description{
EM Algorithm for Bernstein Copula with Binned Data
}
\details{
The \code{options} list may include:
\itemize{
  \item \code{maxiter}: Maximum number of iterations (default: 2000)
  \item \code{abstol}: Absolute tolerance for log-likelihood (default: 1e-3)
  \item \code{reltol}: Relative tolerance (default: 1e-6)
  \item \code{steps}: Number of steps for verbose output (default: 100)
  \item \code{mstep_maxiter}: Maximum M-step iterations (default: 2000)
  \item \code{mstep_abstol}: M-step tolerance (default: 1e-10)
  \item \code{mstep}: M-step algorithm ("sinkhorn" or "dou") (default: "sinkhorn")
  \item \code{verbose}: Logical. Print progress (default: FALSE)
}
}
\examples{
ubreaks <- seq(0, 1, length.out = 6)
vbreaks <- seq(0, 1, length.out = 6)
counts <- matrix(c(10, 20, 30, 40, 50,
                  15, 25, 35, 45, 55,
                  20, 30, 40, 50, 60,
                  25, 35, 45, 55, 65,
                  30, 40, 50, 60, 70), nrow = 5, byrow = TRUE)
R_init <- matrix(1/9, 3, 3)
result <- fit.copula.group(ubreaks, vbreaks, counts, R_init)
result$R
result$llf
result$converged
result$iter
result$abserror
result$relerror
}
